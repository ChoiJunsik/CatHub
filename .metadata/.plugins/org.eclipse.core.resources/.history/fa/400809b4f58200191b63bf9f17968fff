import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.rmi.Naming;

import javax.net.ssl.SSLSocket;

public class ClientSend extends Thread{
	SSLSocket socket;
    DataInputStream dis;
    FileOutputStream fos;
    BufferedOutputStream bos;
	public ClientSend(SSLSocket socket) {
		this.socket = socket;
	}
	@Override
	public void run() {
		try {
			//입력으로들어어는 스트림의 속도 향상
			BufferedReader reader 
			= new BufferedReader(new InputStreamReader(System.in));
			BufferedReader reader2 
			= new BufferedReader(new InputStreamReader(socket.getInputStream()));
			PrintWriter writer =
					new PrintWriter(socket.getOutputStream());//출력스트림
        	dis = new DataInputStream(socket.getInputStream());

			while(true) {
				System.out.println();
				System.out.print("catHub >> ");
				String str = reader.readLine();//입력된 데이타를 한줄단위로 읽음
				if(str.equals("bye")) {
					break;}//입력값이 bye면 클라이언트 종료}
				else if(str.equals("ls")) {
			 		try {
						RmiOp remoteObj =(RmiOp)Naming.lookup("rmi://localhost:1099/HelloRemote");
						String msg = remoteObj.getLsResult();
						System.out.println();
						System.out.println(msg);
					}catch(Exception e) {
						e.printStackTrace();
					}
			 		continue;
				}
				else if(str.equals("pull")) {
			 		try {
						RmiOp remoteObj =(RmiOp)Naming.lookup("rmi://localhost:1099/HelloRemote");
						String msg = remoteObj.getPullResult();
						System.out.println();
						System.out.println(msg);

					}catch(Exception e) {
						e.printStackTrace();
					}
			 		
					writer.println(str);//bye가 아니면 메세지 전송
					writer.flush();//버퍼내의 데이타 밀어내기
					int num = Integer.parseInt(dis.readUTF());
					System.out.println(num);
					while(num>0) {
						num--;
						String filename = dis.readUTF();
				        try {
				        	 
				            String path = System.getProperty("user.home") + "\\Desktop\\catHubClient\\";
				            String fName = path+filename;
        		            // 파일을 생성하고 파일에 대한 출력 스트림 생성
				            File f = new File(fName);
				            fos = new FileOutputStream(f);
				            bos = new BufferedOutputStream(fos);
				            // 바이트 데이터를 전송받으면서 기록
				            int len;
				            int size = 4096;
				            byte[] data = new byte[size];
				            while ( (len = dis.read(data)) != -1) {
				            	System.out.println("얘가 문제야 ㅠ");

				                bos.write(data, 0, len);
				            }
			
				            bos.flush();
				            fos.close();
				        } catch (IOException e) {
				            e.printStackTrace();
				        }

					}
			 		continue;
				}
				writer.println(str);//bye가 아니면 메세지 전송
				writer.flush();//버퍼내의 데이타 밀어내기
				while(true) {
					String recv = reader2.readLine();//데이타의 한줄 구분 '\r\n'
					if(recv.equals("end")) break;
					System.out.println();
					if(recv.equals("404")) {  System.out.println("커맨드를 찾을 수 없다구요!"); break;}//수신메세지 출력
					else {  System.out.println(recv);}//입력받은 값이 없으면 반복문 종료
				}
			}
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}finally {
			try {
				socket.close();//클라이언트 종료시는 반드시 소켓 해제
			}catch(Exception e) {}
		}
	}
}