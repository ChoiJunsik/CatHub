import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

public class Client {
   
   public static void main(String[] args) {
      
      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
      PrintStream out = System.out;
      
      SSLSocketFactory f = null;
      SSLSocket c = null;
      
      BufferedWriter w = null;
      BufferedReader r = null;

      String sServer = "";
      int sPort = -1;
      
      if (args.length != 2) {
         System.out.println("Usage: Classname ServerName securePort");
         System.exit(1);
      }
      sServer = args[0];
      sPort = Integer.parseInt(args[1]);
      // Client Base Folder
      String desktopPath = System.getProperty("user.home") + "\\Desktop\\catHubClient";
      File base = new File(desktopPath);
      base.mkdir();
            
      try {
         System.setProperty("javax.net.ssl.trueStore", "trustedcerts");
         System.setProperty("javax.net.ssl.trueStorePassword", "123456");

         f = (SSLSocketFactory)SSLSocketFactory.getDefault();
         c = (SSLSocket) f.createSocket(sServer, sPort);

         String[] supported = c.getSupportedCipherSuites();
         c.setEnabledCipherSuites(supported);
//         printSocketInfo(c);
         
         c.startHandshake();
         System.out.println(" /\\     /\\");
         System.out.println("{  `---'  }");
         System.out.println("{  O   O  }");
         System.out.println("~~>  V  <~~");
         System.out.println(" \\  \\|/  /");
		 System.out.println("  `-----'____");
		 System.out.println("  /     \\    \\_");
		 System.out.println(" {       }\\  )_\\_");
		 System.out.println(" |  \\_/  |/ /  \\_\\_/ )");
		 System.out.println("  \\__/  /(_/     \\__/");
		 System.out.println("    (__/");
		 System.out.println();
		 System.out.println("      Cat Hub");
   		 Thread th1 = new ClientSend(c);
//  		 Thread th2 = new ClientRecv(c);

 		 th1.start();
// 		 th2.start();

         
//         w.close();
//         r.close();
//         c.close();
      }catch(IOException io) {
         try {
            w.close();
            r.close();
            c.close();
         }catch(IOException i) {}
      }
      //rmi

   }

}