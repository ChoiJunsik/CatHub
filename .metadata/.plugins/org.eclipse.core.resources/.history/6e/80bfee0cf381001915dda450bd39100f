
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.security.KeyStore;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;

public class Server {

   public static void main(String[] args) {
      
      final KeyStore ks;
      final KeyManagerFactory kmf;
      final SSLContext sc;
      
      //Server Base Folder 
      
      String desktopPath = System.getProperty("user.home") + "\\Desktop\\catHubServer";
      File base = new File(desktopPath);
      base.mkdir();
      
      final String runRoot = "C://";  // root change : your system root

      SSLServerSocketFactory ssf = null;
      SSLServerSocket s = null;
      SSLSocket c = null;
      
      BufferedWriter w = null;
      BufferedReader r = null;
      
      if (args.length != 1) {
         System.out.println("Usage: Classname Port");
         System.exit(1);
      }
      int sPort = Integer.parseInt(args[0]);
      String ksName = runRoot + ".keystore//SSLSocketServerKey";
      
      char keyStorePass[] = "154840".toCharArray();
      char keyPass[] = "154840".toCharArray();
      try {
//         LocateRegistry.createRegistry(1099);
         HelloImpl remObj = new HelloImpl();
         java.rmi.Naming.rebind("rmi://localhost:1099/HelloRemote",remObj);
         System.out.println("register remote object");
      }catch(Exception e) {
         e.printStackTrace();
      }
         
      try {
         ks = KeyStore.getInstance("JKS");
         ks.load(new FileInputStream(ksName), keyStorePass);
         //
         
         kmf = KeyManagerFactory.getInstance("SunX509");
         kmf.init(ks, keyPass);
         
         sc = SSLContext.getInstance("TLS");
         sc.init(kmf.getKeyManagers(), null, null);
         
         ssf = sc.getServerSocketFactory();
         s = (SSLServerSocket)ssf.createServerSocket(sPort);
//         printServerSocketInfo(s);
         
         c = (SSLSocket) s.accept();
//         printSocketInfo(c);
         
         w = new BufferedWriter(new OutputStreamWriter(c.getOutputStream()));
         r = new BufferedReader(new InputStreamReader(c.getInputStream()));
        String m = "cathub>>";
 		String prompt
		w.write(m,0,m.length());
		w.newLine();
		w.flush();

		while((m=r.readLine())!=null) {
			if(m.equals(".")) break;
			char[] a = m.toCharArray();
			int n = a.length;
			for(int i=0; i<n/2; i++) {
				char t = a[i];
				a[i] = a[n-1-i];
				a[n-i-1] = t;
			}
			w.write(a,0,n);
			w.newLine();
			w.flush();
		}
		w.close();
		r.close();
		s.close();
		c.close();
            
      } catch (SSLException se) {
         System.out.println("SSL problem, exit~");
         try {
            w.close();
            r.close();
            s.close();
            c.close();
         } catch (IOException i) {
         }
      } catch (Exception e) {
         System.out.println("What?? exit~");
         try {
            w.close();
            r.close();
            s.close();
            c.close();
         } catch (IOException i) {
         }
      }
   }
   
//   private static void printSocketInfo(SSLSocket s) {
//      System.out.println("Socket class: "+s.getClass());
//      System.out.println("   Remote address = "
//            +s.getInetAddress().toString());
//      System.out.println("   Remote port = "+s.getPort());
//      System.out.println("   Local socket address = "
//            +s.getLocalSocketAddress().toString());
//      System.out.println("   Local address = "
//            +s.getLocalAddress().toString());
//      System.out.println("   Local port = "+s.getLocalPort());
//      System.out.println("   Need client authentication = "
//            +s.getNeedClientAuth());
//      SSLSession ss = s.getSession();
//      System.out.println("   Cipher suite = "+ss.getCipherSuite());
//      System.out.println("   Protocol = "+ss.getProtocol());
//   }
//   private static void printServerSocketInfo(SSLServerSocket s) {
//      System.out.println("Server socket class: "+s.getClass());
//      System.out.println("   Server address = "+s.getInetAddress().toString());
//      System.out.println("   Server port = "+s.getLocalPort());
//      System.out.println("   Need client authentication = "+s.getNeedClientAuth());
//      System.out.println("   Want client authentication = "+s.getWantClientAuth());
//      System.out.println("   Use client mode = "+s.getUseClientMode());
//   }
}